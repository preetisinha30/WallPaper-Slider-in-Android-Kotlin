package com.example.wallpaperapp

import android.app.WallpaperManager
import android.content.Context
import android.graphics.Bitmap
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.view.WindowManager
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.result.PickVisualMediaRequest
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
/*import androidx.compose.material.Button
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Surface
import androidx.compose.material.Text*/
import androidx.compose.material3.Button
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.LineHeightStyle
import androidx.compose.ui.unit.dp
import coil.compose.rememberAsyncImagePainter
import coil.request.ImageRequest
import com.example.wallpaperapp.ui.theme.PhotoPickerDemoTheme


class SingleImageActivity  : ComponentActivity() {
    val wm = applicationContext?.getSystemService(Context.WINDOW_SERVICE) as WindowManager?
    //val display = wm?.defaultDisplay
    private var width: Int = 0
    internal var height: Int = 0
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        //width = display?.width ?: 0
       // height = display?.height ?: 0
        setContent {
            PhotoPickerDemoTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    PhotoPickerDemoScreen()
                }
            }
        }
    }
}
fun confirmWallPaper(photoUri: Uri)
{/*
    val bitmap: Bitmap =
        MediaStore.Images.Media.getBitmap(contentResolver, Uri.parse(photoUri))
    val wallpaperManager = WallpaperManager.getInstance(applicationContext)
    wallpaperManager.setBitmap(
        bitmap,
        null,
        true,
        WallpaperManager.FLAG_LOCK
    )
    Toast.makeText(this, "Wallpaper set!", Toast.LENGTH_SHORT).show()*/
}

@Composable
fun PhotoPickerDemoScreen() {
    //The URI of the photo that the user has picked
    var photoUri: Uri? by remember { mutableStateOf(null) }

    //The launcher we will use for the PickVisualMedia contract.
    //When .launch()ed, this will display the photo picker.
    val launcher = rememberLauncherForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri ->
        //When the user has selected a photo, its URI is returned here
        photoUri = uri
    }


    Column {
        Button(
            onClick = {
                //On button press, launch the photo picker
                launcher.launch(PickVisualMediaRequest(
                    //Here we request only photos. Change this to .ImageAndVideo if you want videos too.
                    //Or use .VideoOnly if you only want videos.
                    mediaType = ActivityResultContracts.PickVisualMedia.ImageOnly
                ))
            }
        ) {
            Text("Select Photo")
        }

        if (photoUri != null) {
            //Use Coil to display the selected image
            val painter = rememberAsyncImagePainter(
                ImageRequest
                    .Builder(LocalContext.current)
                    .data(data = photoUri)
                    .build()
            )

            Image(
                painter = painter,
                contentDescription = null,
                modifier = Modifier
                    .padding(5.dp)
                    .fillMaxWidth()
                    .border(6.0.dp, Color.Gray),
                contentScale = ContentScale.Crop
            )

            Button(
                onClick = {
                    //On button press, launch the photo picker
                 //  confirmWallPaper(photoUri)
                },
              //  modifier = Modifier.align(Alignment { 80, 20, Alignment.CenterHorizontally ->  }).padding(bottom = 30.dp)
            ) {
                Text("Confirm WallPaper")
            }
        }

    }
}